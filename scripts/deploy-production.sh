#!/bin/bash\n# deploy-production.sh - Production Deployment\n# Version: 1.0.0\nset -euo pipefail\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE}\")\" && pwd)\"\nreadonly PROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\n\n# Colors\nreadonly RED=\'\033[0;31m\'\nreadonly GREEN=\'\033[0;32m\'\nreadonly YELLOW=\'\033[1;33m\'\nreadonly NC=\'\033[0m\'\n\nlog() {\n    echo -e \"${GREEN}[$(date +\'%Y-%m-%d %H:%M:%S\')] $*${NC}\"\n}\n\nlog_warn() {\n    echo -e \"${YELLOW}[$(date +\'%Y-%m-%d %H:%M:%S\')] WARN: $*${NC}\"\n}\n\nlog_error() {\n    echo -e \"${RED}[$(date +\'%Y-%m-%d %H:%M:%S\')] ERROR: $*${NC}\"\n}\n\nvalidate_production_environment() {\n    log \"üîí Validating production environment...\"\n    \n    local required_vars=(\n        \"ENVIRONMENT\"\n        \"DATABASE_URL\"\n        \"REDIS_URL\"\n        \"GOOGLE_API_KEY\"\n        \"KEYCLOAK_ADMIN_PASSWORD\"\n        \"GRAFANA_ADMIN_PASSWORD\"\n    )\n    \n    local missing_vars=()\n    \n    for var in \"${required_vars[@]}\"; do\n        if [[ -z \"${!var:-}\" ]]; then\n            missing_vars+=(\"$var\")\n        fi\n    done\n    \n    if [[ ${#missing_vars[@]} -gt 0 ]]; then\n        log_error \"Missing required production variables: ${missing_vars[*]}\"\n        exit 1\n    fi\n    \n    # Verify we\'re deploying to production\n    if [[ \"${ENVIRONMENT}\" != \"production\" ]]; then\n        log_error \"ENVIRONMENT must be \'production\' for this script\"\n        exit 1\n    fi\n    \n    log \"‚úÖ Production environment validated\"\n}\n\nbackup_current_deployment() {\n    log \"üíæ Creating backup of current deployment...\"\n    \n    local backup_dir=\"$PROJECT_ROOT/backups/$(date +\'%Y%m%d_%H%M%S\')\"\n    mkdir -p \"$backup_dir\"\n    \n    # Backup database\n    if docker-compose ps postgres | grep -q \"Up\"; then\n        log \"üóÉÔ∏è  Backing up database...\"\n        docker-compose exec -T postgres pg_dump -U \"${POSTGRES_USER}\" \"${POSTGRES_DB}\" \\\n            > \"$backup_dir/database_backup.sql\"\n    fi\n    \n    # Backup Redis\n    if docker-compose ps redis | grep -q \"Up\"; then\n        log \"üíæ Backing up Redis...\"\n        docker-compose exec -T redis redis-cli BGSAVE\n        docker cp \"$(docker-compose ps -q redis):/data/dump.rdb\" \"$backup_dir/redis_backup.rdb\"\n    fi\n    \n    # Backup configuration\n    cp -r \"$PROJECT_ROOT/config\" \"$backup_dir/\" 2>/dev/null || true\n    cp \"$PROJECT_ROOT/.env.production\" \"$backup_dir/\" 2>/dev/null || true\n    \n    log \"‚úÖ Backup created: $backup_dir\"\n}\n\ndeploy_with_zero_downtime() {\n    log \"üöÄ Starting zero-downtime deployment...\"\n    \n    # Pull latest images\n    log \"üì• Pulling latest Docker images...\"\n    docker-compose -f docker-compose.prod.yml pull\n    \n    # Deploy services in stages\n    \n    # Stage 1: Infrastructure services\n    log \"üèóÔ∏è  Deploying infrastructure services...\"\n    docker-compose -f docker-compose.prod.yml up -d \\\n        postgres redis prometheus grafana\n    \n    # Wait for infrastructure\n    sleep 15\n    \n    # Stage 2: Security services\n    log \"üõ°Ô∏è  Deploying security services...\"\n    docker-compose -f docker-compose.prod.yml up -d \\\n        keycloak vault\n    \n    sleep 20\n    \n    # Stage 3: AI services\n    log \"ü§ñ Deploying AI services...\"\n    docker-compose -f docker-compose.prod.yml up -d \\\n        litellm-proxy\n    \n    sleep 10\n    \n    # Stage 4: Frontend services\n    log \"üåê Deploying frontend services...\"\n    docker-compose -f docker-compose.prod.yml up -d \\\n        frontend nginx\n    \n    log \"‚úÖ Zero-downtime deployment completed\"\n}\n\nrun_production_health_checks() {\n    log \"üè• Running production health checks...\"\n    \n    local health_endpoints=(\n        \"http://localhost:8081/health:AI Proxy\"\n        \"http://localhost:9090/-/ready:Prometheus\"\n        \"http://localhost:3000/api/health:Grafana\"\n    )\n    \n    local failed_checks=()\n    \n    for endpoint_info in \"${health_endpoints[@]}\"; do\n        local url=\"${endpoint_info%%:*}\"\n        local name=\"${endpoint_info##*:}\"\n        \n        if curl -s -f \"$url\" >/dev/null; then\n            log \"‚úÖ $name: HEALTHY\"\n        else\n            log_error \"‚ùå $name: UNHEALTHY\"\n            failed_checks+=(\"$name\")\n        fi\n    done\n    \n    if [[ ${#failed_checks[@]} -gt 0 ]]; then\n        log_error \"Health checks failed for: ${failed_checks[*]}\"\n        return 1\n    fi\n    \n    log \"‚úÖ All production health checks passed\"\n}\n\nsetup_monitoring_alerts() {\n    log \"üì¢ Setting up production monitoring alerts...\"\n    \n    # Import Grafana dashboards\n    local dashboard_dir=\"$PROJECT_ROOT/grafana/dashboards\"\n    if [[ -d \"$dashboard_dir\" ]]; then\n        log \"üìä Importing Grafana dashboards...\"\n        # Dashboard import logic would go here\n        # This would use Grafana API to import dashboards\n    fi\n    \n    # Configure Prometheus alerts\n    local alerts_dir=\"$PROJECT_ROOT/prometheus/alerts\"\n    if [[ -d \"$alerts_dir\" ]]; then\n        log \"üö® Configuring Prometheus alerts...\"\n        # Alert configuration logic would go here\n    fi\n    \n    log \"‚úÖ Monitoring alerts configured\"\n}\n\nmain() {\n    log \"üè≠ Full-Stack Industrial AI - Production Deployment\"\n    log \"Version: 1.0.0\"\n    log \"Timestamp: $(date)\"\n    \n    # Safety checks\n    if [[ \"${1:-}\" != \"--confirm-production\" ]]; then\n        log_error \"This will deploy to PRODUCTION environment\"\n        log_error \"Add --confirm-production flag to continue\"\n        exit 1\n    fi\n    \n    # Load production environment\n    if [[ -f \"$PROJECT_ROOT/.env.production\" ]]; then\n        set -a\n        source \"$PROJECT_ROOT/.env.production\"\n        set +a\n    else\n        log_error \".env.production file not found\"\n        exit 1\n    fi\n    \n    validate_production_environment\n    backup_current_deployment\n    deploy_with_zero_downtime\n    run_production_health_checks\n    setup_monitoring_alerts\n    \n    log \"üéâ Production deployment completed successfully!\"\n    log \"\"\n    log \"üåê Production services:\"\n    log \"  Frontend: https://your-domain.com\"\n    log \"  AI Proxy: https://api.your-domain.com\"\n    log \"  Monitoring: https://grafana.your-domain.com\"\n    log \"\"\n    log \"üìä Next steps:\"\n    log \"  1. Verify all services are responding correctly\"\n    log \"  2. Run load tests to validate performance\"\n    log \"  3. Monitor alerts for first 24 hours\"\n    log \"  4. Update DNS/CDN configurations if needed\"\n    log \"\"\n    log \"üÜò Rollback: ./scripts/rollback.sh <backup_timestamp>\"\n}\n\n# Execute main function if script is run directly\nif [[ \"${BASH_SOURCE}\" == \"${0}\" ]]; then\n    main \"$@\"\nfi\n