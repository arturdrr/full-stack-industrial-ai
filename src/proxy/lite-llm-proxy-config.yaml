# ================================
# ROTEAMENTO PERFEITO GROK + GEMINI
# ================================
general_settings:
  master_key: ${LITELLM_MASTER_KEY} # Chave mestre para admin
  port: 8081
  database_url: "sqlite:///cost_tracking.db"

model_list:
  # üöÄ Grok Free Tier (Prioridade para queries simples)
  - model_name: "grok-free"
    litellm_params:
      model: "grok/grok-beta"
      api_key: ${GROK_API_KEY}
      api_base: "https://api.x.ai/v1"
    model_info:
      mode: "chat"
      max_tokens: 2048
      input_cost_per_token: 0  # Free tier
      output_cost_per_token: 0  # Free tier
      max_requests_per_day: 10000  # Free limit
      
  # üß† Gemini Pro (Principal para workload)
  - model_name: "gpt-4"
    litellm_params:
      model: "gemini/gemini-1.5-pro"
      api_key: ${GOOGLE_API_KEY}
    model_info:
      mode: "chat"
      max_tokens: 8192
      input_cost_per_token: 0.00000125  # $1.25/1M
      output_cost_per_token: 0.000005   # $5.00/1M
      context_window: 1000000
      
  - model_name: "gpt-3.5-turbo"
    litellm_params:
      model: "gemini/gemini-1.5-flash"
      api_key: ${GOOGLE_API_KEY}
    model_info:
      mode: "chat"
      max_tokens: 4096
      input_cost_per_token: 0.0000001875  # $0.1875/1M
      output_cost_per_token: 0.00000075   # $0.75/1M
      
  # ‚ö° Abacus Backup (Enterprise quando necess√°rio)
  - model_name: "abacus-gpt-4"
    litellm_params:
      model: "abacus/gpt-4"
      api_key: ${ABACUS_API_KEY}
      api_base: "https://api.abacus.ai/llm/v1"
    model_info:
      mode: "chat"
      enabled: false  # Ativar quando necess√°rio

# ================================
# ROTEAMENTO INTELIGENTE
# ================================
router_settings:
  routing_strategy: "cost-optimized-routing"
  
  # Regras de roteamento baseadas em complexidade
  routing_pattern:
    # Queries simples ‚Üí Grok Free
    - condition: |
        (num_tokens <= 500 AND 
         complexity_score <= 0.3 AND
         query_type IN ['simple_qa', 'basic_code', 'quick_response'])
      route_to: "grok-free"
      priority: 1
      reason: "simple_query_free_tier"
      
    # Queries m√©dias ‚Üí Gemini Flash
    - condition: |
        (num_tokens > 500 AND num_tokens <= 2000 AND
         complexity_score <= 0.7)
      route_to: "gpt-3.5-turbo"  # Gemini Flash
      priority: 2
      reason: "medium_complexity_cost_effective"
      
    # Queries complexas ‚Üí Gemini Pro
    - condition: |
        (num_tokens > 2000 OR 
         complexity_score > 0.7 OR
         requires_reasoning OR
         priority == 'high')
      route_to: "gpt-4"  # Gemini Pro
      priority: 3
      reason: "complex_reasoning_required"
  
  # Fallback em cascata
  fallbacks:
    - "grok-free": ["gpt-3.5-turbo", "ollama/llama3.1:8b"]
    - "gpt-3.5-turbo": ["gpt-4", "grok-free", "ollama/llama3.1:8b"]
    - "gpt-4": ["gpt-3.5-turbo", "abacus-gpt-4", "ollama/llama3.1:8b"]

# ================================
# RATE LIMITING OTIMIZADO
# ================================
rate_limits:
  # Grok Free Tier - Conservador
  grok_limits:
    requests_per_minute: 15      # Dentro do limite gratuito
    requests_per_hour: 100       # Espalhar ao longo do dia
    tokens_per_minute: 7500      # Evitar burst
    daily_request_limit: 2000    # Margem de seguran√ßa
    
  # Gemini Pro - Agressivo
  gemini_limits:
    requests_per_minute: 60      # Usar limite pro
    tokens_per_minute: 50000     # Alto throughput
    daily_cost_limit: 15.00      # $15/dia max

# ================================
# CACHE INTELIGENTE
# ================================
cache:
  type: "redis"
  redis_url: ${REDIS_URL:-"redis://localhost:6379"}
  
  # Cache diferenciado por provider
  cache_policies:
    grok_free:
      ttl: 86400      # 24h - economizar requests gratuitos
      similarity: 0.95 # Cache muito agressivo
      
    gemini_flash:
      ttl: 3600       # 1h - balancear custo/freshness
      similarity: 0.88
      
    gemini_pro:
      ttl: 1800       # 30min - dados mais frescos
      similarity: 0.85

# ================================
# MONITORAMENTO DE CUSTOS
# ================================
budget_manager:
  daily_budget: 12.00  # $12/dia total
  
  # Distribui√ß√£o otimizada
  provider_budgets:
    grok: 0.00        # Gr√°tis!
    gemini_flash: 4.00 # $4/dia - queries m√©dias
    gemini_pro: 8.00   # $8/dia - queries complexas
    
  # Alertas escalonados
  cost_alerts:
    - threshold: 6.00   # 50% budget
      action: "notify_slack"
      message: "50% daily budget reached"
      
    - threshold: 9.00   # 75% budget  
      action: "throttle_non_essential"
      message: "Throttling non-essential requests"
      
    - threshold: 11.00  # 90% budget
      action: "grok_only_mode"
      message: "Switching to Grok-only mode"