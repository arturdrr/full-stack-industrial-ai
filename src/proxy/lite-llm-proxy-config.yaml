# ================================
# CONFIGURAÇÃO MCP
# ================================
mcp_settings:
  # Servidor MCP principal
  mcp_server:
    enabled: true
    host: "0.0.0.0"
    port: 8082
    protocol: "stdio"  # ou "http", "sse"
    
  # Tools MCP expostos
  tools:
    - name: "query_agent"
      description: "Executa query em qualquer agente da stack"
      parameters:
        agent: { type: "string", enum: ["trae", "langchain", "dyad", "openhands"] }
        query: { type: "string" }
        
    - name: "get_metrics"
      description: "Obtém métricas de performance dos agentes"
      parameters:
        timeframe: { type: "string", default: "1h" }
        
    - name: "manage_workflow"
      description: "Gerencia workflows multi-agente"
      parameters:
        action: { type: "string", enum: ["start", "stop", "status"] }
        workflow_id: { type: "string" }

  # Resources MCP
  resources:
    - name: "agent_configs"
      description: "Configurações dos agentes"
      uri: "config://agents/*"
      
    - name: "execution_logs"
      description: "Logs de execução dos agentes"
      uri: "logs://agents/*"
      
    - name: "metrics_data"
      description: "Dados de métricas em tempo real"
      uri: "metrics://prometheus/*"

  # Prompts MCP reutilizáveis
  prompts:
    - name: "orchestrate_multi_agent"
      description: "Template para orquestração multi-agente"
      template: |
        Você é um orquestrador de agentes IA. Sua tarefa é:
        1. Analisar a requisição: {query}
        2. Identificar agentes necessários: {available_agents}
        3. Definir sequência de execução
        4. Coordenar execução e coletar resultados
        
    - name: "agent_handoff"
      description: "Template para transferência entre agentes"
      template: |
        Transferindo contexto de {source_agent} para {target_agent}:
        Contexto: {context}
        Objetivo: {objective}
        Estado atual: {current_state}

# ================================
# ORCHESTRAÇÃO MCP
# ================================
mcp_orchestration:
  # Descoberta automática de agentes
  auto_discovery:
    enabled: true
    scan_interval: 30
    endpoints:
      - "http://trae-agent.default.svc.cluster.local:8080/mcp"
      - "http://langchain-agent.default.svc.cluster.local:8081/mcp"
      - "http://openhands.default.svc.cluster.local:8082/mcp"
  
  # Roteamento inteligente
  routing:
    strategy: "capability_based"  # ou "round_robin", "load_balanced"
    capability_mapping:
      code_generation: ["trae", "openhands"]
      text_analysis: ["langchain", "trae"]
      local_processing: ["dyad"]
      workflow_orchestration: ["openhands", "trae"]
  
  # Coordenação multi-agente
  coordination:
    max_concurrent_workflows: 10
    workflow_timeout: 1800  # 30 minutos
    handoff_timeout: 30     # 30 segundos
    
# ================================
# BRIDGING MCP <-> LITELLM
# ================================
mcp_bridge:
  # Converter calls LiteLLM para MCP
  litellm_to_mcp:
    enabled: true
    tool_mapping:
      # Mapear funções LiteLLM para tools MCP
      "function_call": "mcp_tool_call"
      "get_completion": "mcp_completion"
      
  # Converter responses MCP para LiteLLM
  mcp_to_litellm:
    enabled: true
    response_format: "openai_compatible"
    
  # Middleware para conversão
  middleware:
    - name: "context_propagation"
      enabled: true
    - name: "error_handling"
      enabled: true
    - name: "metrics_collection"
      enabled: true

# ================================
# MCP SERVERS CONFIGURATION
# ================================
mcp_servers:
  # Core Infrastructure
  git_github:
    transport: "stdio"
    command: "npx"
    args: ["@anthropic/mcp-git"]
    env:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO: "arturdrr/full-stack-industrial-ai"
  
  docker_orchestration:
    transport: "stdio" 
    command: "docker-mcp-server"
    env:
      DOCKER_HOST: "unix:///var/run/docker.sock"
  
  # AI/ML Specific
  multi_agent_orchestrator:
    transport: "http"
    endpoint: "http://mcp-agent.default.svc.cluster.local:8090"
    headers:
      Authorization: "Bearer ${MCP_AGENT_TOKEN}"
  
  # Database Access
  database_manager:
    transport: "stdio"
    command: "python"
    args: ["-m", "mcp_database"]
    env:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
  
  # Observability
  prometheus_grafana:
    transport: "http"
    endpoint: "http://prometheus.default.svc.cluster.local:9090/mcp"
    
  # Enterprise Integration  
  slack_notifications:
    transport: "stdio"
    command: "mcp-slack-server"
    env:
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
  
  keycloak_auth:
    transport: "http"
    endpoint: "http://keycloak.default.svc.cluster.local:8080/mcp"
    headers:
      Authorization: "Bearer ${KEYCLOAK_ADMIN_TOKEN}"

# Tool routing per agent
agent_mcp_mapping:
  trae_agent:
    allowed_mcps: 
      - git_github
      - docker_orchestration
      - multi_agent_orchestrator
      - database_manager
      - observability
    
  langchain_agent:
    allowed_mcps:
      - database_manager
      - observability
      - slack_notifications
    
  openhands_orchestrator:
    allowed_mcps:
      - git_github
      - docker_orchestration
      - multi_agent_orchestrator
      - keycloak_auth
    
  dyad_agent:
    allowed_mcps:
      - database_manager  # Apenas local/privado
